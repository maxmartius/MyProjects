[{"topic": "Requirements & Specification (Basics)", "title": "Changing Requirements.. The dreaded nightmare of a BA\u2026", "article_text": "Changing Requirements.. The dreaded nightmare of a BA\u2026 Shemal Mustapha \u00b7 Follow 6 min read \u00b7 Feb 27, 2018 -- Listen Share This is the ultimate nightmare that we BAs face on a day to day basis. We write a specification, define a scope of work with time lines, draw fancy diagrams, be that macho man to explain the requirement to technical teams, be that go to person when the QAs want their test cases reviewed; but all of this done only to realize that the customer comes back to say \u201cHey, I think we need to discuss again what we spoke of that day. I have a few more things to add\u201d, or only to hear the dreaded words \u201cthis is not even close to what I expected\u201d. So this brings us to the question why do customer requirements keep changing. Based on my short stint as BA the following points are my findings. Misunderstanding the technical concepts in the beginning \u2014 Gone are the days where we would all be referring a single text book or a selected set of books by reputed authors to understand a technical concept. With the advent of google, we all pretty much learn things mostly by referring to the internet. And who is to be blamed? Technology today, changes so rapidly that there is no time for books to be written or journals to be published instantaneously. We all work in time bounded environments, where the quick google search proves to be a life saver as opposed visiting a library or reading through an entire journal to learn about something. So what does this do? we all learn something or the other the more we read and when we talk about something, our minds are automatically tuned to think about what we\u2019ve read. And in the customers mind he/she does the same too. We end up talking about something with him/her for hours and hours. We think the customer knows what we are talking about, and make no mistake he does think the same too. But in reality our thoughts may not be aligned. We have referred to two separate opinions on a given technical concept. We might be wanting the customer to think about what we know about a technical concept, but in reality he is thinking about what he knows about it. No body is wrong here. Its just that our thoughts are not aligned. So we might be talking about \u2018Containerization or Dockerization\u2019 as to what we think it is, and the customer is processing that information based on what he knows it to be. As far as I think, the best and most feasible way to mitigate this scenario is to present a fictitious end solution to the customer. Don\u2019t shy away from letting him/her know what you think you are going to implement, and then build on from there if there is a mismatch between your thoughts and his. Dumb your self down no matter how smart you may be, and think of you as your own student. If you were a student would you understand the shizz you are just bombarding your customer with. Initial discussions are not with End Users \u2014 Make no mistake most of the time majority of the initial discussions are held with the so called \u2018Big Fish\u2019 of an organization. You know, the type of people who sit in front of their laptop day in day out doing all the reading about fancy tech discoveries and wanting to implement that in their organizations, or the people who call the shots in a company but play little part in its execution. Yes you know who I am talking about. It is those people that we end up having discussions with. And these people usually tend to have very broad and open ended views as to what they want. They end up serving broad open ended requirements too. The type of requirements they offer could be something like \u201cI want to digitize all my operations\u201d as opposed to actually specifying the nitty gritties of what is exactly required. Now whilst these fancy visionary statements are pretty cool to hear of and talk about, they serve very little purpose in terms of implementing a final solution. To implement a complete final solution you need to handle the unpleasant nitty gritties. i.e. You need to address all of the ifs? buts? and what ifs? And who can provide you this information? well the \u2018Big Fish\u2019 sure can\u2019t cos they are not the ones who swim in the ocean. You need to ask the \u2018End Users\u2019, yes you are right, the ones who work day in day out, the ones who go through it all on a daily basis. Yes, it is important you talk to them. Give them a ray of hope that their lives are going to be better as a result of the solution, and they just might give you all the intel you need to know in order to build a complete solution that not only makes them happy but their bosses as well. Customers lack of understanding of what he wants \u2014 Another common reason that brings about a lot of change in requirements is that the customer does not know exactly what he wants until he sees it. See, the interesting thing about human nature is this thing known as \u2018Cognitive Dissonance\u2019. Simply put, as human beings we always tend to have contradicting thoughts to our own beliefs and wants. We might have bought a smart phone today after having done all the research, but after having bought it we tend to think \u201cwhy did I not buy that other phone?\u201d. A good way of reducing this issue is to ask the customer why he wants a certain requirement as opposed to what the requirement actually is.  If the customer doesn\u2019t know why he/she wants a certain requirement, then realistically speaking he/she actually doesn\u2019t need it.  And if he/she is able to tell you why, then now you are at a better position of delivering what he/she needs, as opposed to what he/she wants. Those who\u2019ve studied basic economics you would know that \u2018needs\u2019 don\u2019t change too often, but \u2018wants\u2019 can change all the time. Too keen to get in to the implementation stage \u2014 The discussion stage or design stage of a project as we call it is usually the stage perceived to be the most lethargic of all by those who don\u2019t engage in it. After all to the outside world \u2018we are just sitting in a room blabbering stuff all day, drinking cups and cups of tea, having cake and buns\u2019. Well make no mistake, 80% of the time that is exactly what we are doing. Collectively put these design meetings yield something noteworthy with a concrete conclusion only on 20% of the things which are discussed. Hence the tendency is that \u201cwe should get to the implementation stage ASAP\u201d because that is where we start seeing something tangible taking shape. Well to a certain extent that needs to be accepted. There is no way you can plan things 100% or build a fool proof plan that you can guarantee will never change. The more you try to do it, might mean more cups of tea and cake but very little valuable project substance. The development of Agile is thus a way forward. People tend to think in small bits and pieces and try as much as possible to draft out smaller yet solid plans. The important thing again is to make this investment in building these small plans or user stories as they call it. The common misconception is that Agile should run without a plan and dive directly in to implementation. In my opinion though, it is still important that planning is done in phases, too many compromises made in planning will bite you bad in the end thus leading to many changes in requirements. At the same time though, it is important to realize that a certain amount of change as unavoidable.  The point where change becomes frustrating is when the possibility of it is not foreseen and accounted for at the beginning.  Mid way in to the project you foresee some changes coming up and that happens to extend your deadline by a month. What if though you had predicted it and accounted for it, thus started off with a bit of a buffer. That way you have set your expectations right. If the customer still wants to cut it short, then you would at least know that you need more resources and can plan for it from the beginning it self. The key in my opinion is to understand that there will be change, do everything you can to reduce it, but do not think for a moment you can avoid it completely. Accept that there will be change as you go along and identify that it too is like any other process inefficiency which you need to account for during your planning. Predicting as to how much that could be and maintaining it within tolerable limits, is the best you can hope for. With time you will learn to manage it better, just like any other process inefficiency."}, {"topic": "Requirements Engineering for AI-Enabled Systems", "title": "Machine Learning in Production: From Models to Products", "article_text": "Machine Learning in Production: From Models to Products Christian K\u00e4stner \u00b7 Follow 2 min read \u00b7 Feb 12, 2021 -- Listen Share After teaching our  Machine Learning in Production  class (formerly \u201cSoftware Engineering for AI-Enabled Systems\u201d) four times, we stupidly made a decision we soon regretted when there were still so many chapters left: We are going to write a book with our collected material. We will release the book in book form eventually. While we work on it, we released individual chapters here, one at a time, under the creative commons license. Now that all chapters are here, we\u2019ll go back and edit and pull them all together a bit more. Cite as:  Christian K\u00e4stner. Machine Learning in Production: From Models to Products. 2022. Table of Contents Part 1: Machine Learning in Production: Going Beyond the Model 1.  Introduction 2.  From models to systems 3.  Machine learning for software engineers, in a nutshell Part 2:  Requirements Engineering 1.  When to use machine learning 2.  Setting and measuring goals 3.  Gathering requirements 4.  Planning for mistakes Part 3: Architecture and design 1.  Architectural components in ML-enabled systems 2.  Thinking like a software architect 3.  Quality attributes of ML components 4.  Deploying a model 5.  Automating the ML pipeline 6.  Scaling the system 7.  Planning for operations Part 4: Quality assurance 1.  Quality assurance basics 2.  Model quality: Defining correctness and fit 3.  Model quality: Measuring prediction accuracy 4.  Model quality: Slicing, capabilities, invariants, and other model testing strategies 5.  Data quality 6.  ML pipeline quality 7.  Quality assurance in production 8.  Integration and system testing Part 5: Process and Teams 1.  Data science and software engineering process models 2.  Interdisciplinary teams 3.  Technical debt Part 6: Responsible ML Engineering Responsible Engineering Versioning, provenance, and reproducibility Interpretability and explainability Safety Security and privacy Fairness Transparency and accountability All chapters are released under Creative Commons 4.0 BY-SA license."}]